{
  "name": "Upwork Agent - Complete Workflow",
  "nodes": [
    {
      "parameters": {
        "triggerTimes": {
          "item": [
            {
              "hour": "*/4",
              "minute": "0"
            }
          ]
        }
      },
      "name": "Cron Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [250, 300]
    },
    {
      "parameters": {
        "requestMethod": "GET",
        "url": "http://python-service:8000/health",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "name": "Health Check",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [450, 300]
    },
    {
      "parameters": {
        "jsCode": "// Set search query for job fetching\nconst searchQuery = \"web scraping csv\";\nreturn [{ json: { query: searchQuery, pages: 1 } }];"
      },
      "name": "Set Search Query",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [650, 300]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "http://python-service:8000/fetch/playwright",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            },
            {
              "name": "pages",
              "value": "={{ $json.pages }}"
            }
          ]
        },
        "options": {}
      },
      "name": "Fetch Jobs",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [850, 300]
    },
    {
      "parameters": {
        "jsCode": "// Extract job IDs from fetch response\nconst jobIds = $input.first().json.inserted || [];\n\nif (jobIds.length === 0) {\n  return [{ json: { message: \"No new jobs found\", jobIds: [] } }];\n}\n\n// Return array for For Each loop\nreturn jobIds.map(jobId => ({\n  json: { job_id: jobId }\n}));"
      },
      "name": "Extract Job IDs",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "mode": "items",
        "outputFormat": "item"
      },
      "name": "For Each Job",
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "http://python-service:8000/analyze/{{ $json.job_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "name": "Analyze Job",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1450, 200]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.score }}",
              "rightValue": "7",
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "Score Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1650, 200]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "http://python-service:8000/generate/{{ $json.job_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "name": "Generate Proposal",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1850, 150]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "1",
              "leftValue": "={{ $json.qc_passed }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "name": "QC Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [2050, 150]
    },
    {
      "parameters": {
        "requestMethod": "POST",
        "url": "http://python-service:8000/prepare_submission/{{ $json.job_id }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "options": {}
      },
      "name": "Prepare Submission",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [2250, 100]
    },
    {
      "parameters": {
        "jsCode": "// Log successful job processing\nconst jobData = $input.first().json;\n\n// This is where you would send email/Slack notification for human approval\n// For now, just log the successful processing\n\nreturn [{\n  json: {\n    message: \"Job ready for submission\",\n    job_id: jobData.job_id,\n    job_url: jobData.job_url,\n    proposal_preview: jobData.prefill_text ? jobData.prefill_text.substring(0, 100) + \"...\" : \"No proposal\",\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "name": "Log Success",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2450, 100]
    },
    {
      "parameters": {
        "jsCode": "// Log low scoring job\nconst jobData = $input.first().json;\n\nreturn [{\n  json: {\n    message: \"Job scored too low\",\n    job_id: jobData.job_id,\n    score: jobData.score,\n    reasoning: jobData.reasoning,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "name": "Log Low Score",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1850, 350]
    },
    {
      "parameters": {
        "jsCode": "// Log QC failed job\nconst jobData = $input.first().json;\n\nreturn [{\n  json: {\n    message: \"Proposal failed QC\",\n    job_id: jobData.job_id,\n    qc_issues: jobData.issues,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "name": "Log QC Failed",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2250, 350]
    }
  ],
  "connections": {
    "Cron Trigger": {
      "main": [
        [
          {
            "node": "Health Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Health Check": {
      "main": [
        [
          {
            "node": "Set Search Query",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Search Query": {
      "main": [
        [
          {
            "node": "Fetch Jobs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Jobs": {
      "main": [
        [
          {
            "node": "Extract Job IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Job IDs": {
      "main": [
        [
          {
            "node": "For Each Job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "For Each Job": {
      "main": [
        [
          {
            "node": "Analyze Job",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Job": {
      "main": [
        [
          {
            "node": "Score Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Score Check": {
      "main": [
        [
          {
            "node": "Generate Proposal",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Low Score",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Proposal": {
      "main": [
        [
          {
            "node": "QC Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "QC Check": {
      "main": [
        [
          {
            "node": "Prepare Submission",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log QC Failed",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Submission": {
      "main": [
        [
          {
            "node": "Log Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "versionId": "1",
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "id": "upwork-agent-complete",
  "tags": []
}